#!/usr/bin/env bash

for p in nsxiv mpv jq rofi; do
  [ ! "$(type "$p")" ] && echo "$p needs to be installed" && exit 1
done

TMP_DIR="/tmp/reddget-000"
JSON_FILE="$TMP_DIR/list.json"
URL_LIST="$TMP_DIR/url-list"
CURL_LIST="$TMP_DIR/curl-list"
LAST_NAME_FILE="$TMP_DIR/last-name"
FIRST_NAME_FILE="$TMP_DIR/first-name"
MEDIA_DIR="$TMP_DIR/media"

CONF_DIR="${XDG_CONFIG_HOME:-$HOME/.config}/reddget"
CONF_FILE="$CONF_DIR/reddget.conf"

[ ! -d "$TMP_DIR" ] && mkdir -p "$TMP_DIR"
[ ! -d "$CONF_DIR" ] && mkdir -p "$CONF_DIR"
[ ! -d "$MEDIA_DIR" ] && mkdir -p "$MEDIA_DIR"

if [ -s "$CONF_FILE" ]; then
  # shellcheck source=/dev/null
 . "${CONF_FILE}"
else
  default_sub="unixporn"
  default_limit="50"
  subreddits=""
fi

img_viewer="nsxiv -p -b -a"
vid_viewer="mpv --loop=inf --really-quiet"

usage() {
cat << EOF
Get images and stream videos from reddit
Very simple script:
    reddget [-cnpvfh] [-s SUBREDDIT] [-l LIMITS]

    -s    SUBREDDIT
           Choose a subreddit

    -l    LIMIT
           Set the limit of posts to search for (default: 50)

    -c    Choose a subreddit from the config file
    -v    Watch videos instead of images
    -t    Search for the top posts of all time
    -f    View content on fullscreen (must come first as option)
    -n    Go to next page of posts (only works after fisrt query whitout this option)
    -p    Go to previews page of posts (only works after using the option above)
    -h    Show this help message

EOF
exit
}

while getopts ":s:l:ctnpvfh" options; do
  case $options in

    s) sub="${OPTARG}";;
    l) limit="${OPTARG}";;

    c)
      [ ! -e "$CONF_FILE" ] && echo "Config file doesn't exist" && exit 1
      sub=$(
        echo "${subreddits[@]}" |
        rofi -dmenu -sep ' ' -i -p "Subreddit"
      )
      [ -z "$sub" ] && exit 1;;

    t) query="top.json?";;
    n) page="after=$(cat $LAST_NAME_FILE)";;
    p) page="before=$(cat $FIRST_NAME_FILE)";;
    v) video_opt="1";;
    f) img_viewer="${img_viewer} -f" && vid_viewer="${vid_viewer} --fs";;
    h) usage;;

    \?) echo "Invalid option: '-${OPTARG}'" && exit 1;;
    :)  echo "The option '-${OPTARG}' needs an argument." && exit 1;;
  esac
done

cleanup() {
  : > $JSON_FILE
  : > $URL_LIST
  : > $CURL_LIST
  rm -f "$MEDIA_DIR/"*
}

get_info() {
  base_url="https://www.reddit.com/r"
  curl -s -H "User-Agent: Bruh Moment" -H "Content-Type: application/json" \
    -G "${base_url}/${1}/${2:-hot.json?}" -d "t=all" -d "limit=${3}" -d "${4:-}" |
    jq '.' > "$JSON_FILE"

  if [ "$video_opt" = "1" ]; then
    jq -r '.data.children[].data.preview.reddit_video_preview.fallback_url' "$JSON_FILE" \
      > "$URL_LIST"
  else
    jq -r '.data.children[].data.url_overridden_by_dest' "$JSON_FILE" |
      grep -E "http(s|)://.*(jpg|jpeg|png|gif)\b" | sort -u > "$URL_LIST"
  fi

  jq -r '.data.children[-1].data.name' "$JSON_FILE" > "$LAST_NAME_FILE"
  jq -r '.data.children[0].data.name' "$JSON_FILE" > "$FIRST_NAME_FILE"
}

view() {

  if [ "$video_opt" = "1" ]; then

    $vid_viewer --playlist="$URL_LIST"

  else

    while read -r file; do
      printf "url = \"%s\"\noutput = \"$MEDIA_DIR/%s\"\n" "$file" "${file##*/}"
    done < $URL_LIST >> $CURL_LIST

    curl -sLZf -K "$CURL_LIST" >/dev/null 2>&1

    $img_viewer "$MEDIA_DIR/"* >/dev/null 2>&1

  fi
}

[ -z "$sub" ] && sub="$default_sub"
[ -z "$limit" ] && limit="$default_limit"

get_info "$sub" "$query" "$limit" "$page"
view

cleanup
