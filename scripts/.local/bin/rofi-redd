#!/usr/bin/env sh
# shellcheck source=/dev/null

TITLE=$(echo "${0##*/}" | tr '[:lower:]' '[:upper:]')

TMP_DIR="$(mktemp -d /tmp/rofi-redd-XXXXXXXXX)"
MEDIA_DIR="$(mktemp -d "$TMP_DIR"/mediaXXXX)"
JSON_FILE="$TMP_DIR/list.json"
URL_LIST="$TMP_DIR/url-list"
CURL_LIST="$TMP_DIR/curl-list"
SUBS_QUERY="$TMP_DIR/subs-query"
LAST_NAME_FILE="$TMP_DIR/last-name"
FIRST_NAME_FILE="$TMP_DIR/first-name"

CONF_DIR="${XDG_CONFIG_HOME:-$HOME/.config}/rofi-redd"
LIST_FILE="$CONF_DIR/list"

trap 'rm -r "$TMP_DIR"' EXIT

get_info() {
  base_url="https://www.reddit.com"

  if [ "$subreddits_query" -eq 1 ]; then
    curl -s -H "User-Agent: Certified Human Being" -H "Content-Type: applications/json" \
      -G "${base_url}/subreddits/search.json?" -d "q=${1}" -d "include_over_18=true" -d "{2:-}" |
      jq '.' > "$JSON_FILE"

    jq -r '.data.children[].data | "\(.display_name)\t\(.subscribers)"' "$JSON_FILE" |
      column -t -s "$(printf '\t')" > "$SUBS_QUERY"

  else

    curl -s -H "User-Agent: Certified Human Being" -H "Content-Type: applications/json" \
      -G "${base_url}/r/${1}/${sort_query:-hot.json}?" -d "t=all" -d "limit=50" -d "${2:-}" | jq '.' > "$JSON_FILE"

    if [ "$video_query" -eq 1 ]; then

      jq -r '.data.children[].data.preview.reddit_video_preview.fallback_url' "$JSON_FILE" |
        sort -u > "$URL_LIST"

    else

      jq -r '.data.children[].data.url' "$JSON_FILE" |
        grep -E "http(s|)://.*(jpg|jpeg|png|gif)\b" | sort -u > "$URL_LIST"

    fi
  fi

  jq -r '.data.children[-1].data.name' "$JSON_FILE" > "$LAST_NAME_FILE"
  jq -r '.data.children[0].data.name' "$JSON_FILE" > "$FIRST_NAME_FILE"
}

check_request() {
  response=$(curl -s -H "User-Agent: Not a bot" -o /dev/null -w "%{http_code}" "https://www.reddit.com/r/${1}/hot.json?&t=all")
  if [ "$response" -eq 200 ]; then
    return 0
  else
    return 1
  fi
}

media_type_option() {
  media_type_opt=$(
    printf "images\nvideos" | rofi -dmenu -mesg "${TITLE} - Images or videos?" -p ">"
  )

  if [ "$media_type_opt" = "videos" ]; then
    video_query=1
  else
    video_query=0
  fi

  return
}

sort_option() {
  sort_opt=$(
    printf "hot\ntop" | rofi -dmenu -mesg "${TITLE} - Sort by?" -p ">"
  )

  case "$sort_opt" in
    hot) sort_query="hot.json";;
    top) sort_query="top.json";;
    *) return
  esac
}

clean_media() {
  if [ "$video_query" -ne 1 ]; then

    rm -r "${MEDIA_DIR:?}/"*
    : > "$CURL_LIST"

  fi

  return
}

watch_media() {
  sub_name="$1"

  get_info "$sub_name"

  while true; do

    if [ "$video_query" -eq 1 ]; then

      mpv --hwdec=no --mute=yes --loop=inf --really-quiet --fs --playlist="$URL_LIST"

    else

      while read -r file; do
        printf "url = \"%s\"\noutput = \"$MEDIA_DIR/%s\"\n" "$file" "${file##*/}"
      done < "$URL_LIST" >> "$CURL_LIST"

      notif_id=$(notify-send -t 0 -p "⬇️ Downloading images...")
      curl -s -Z -K "$CURL_LIST" && notify-send -t 250 -r "$notif_id" "Done!"

      nsxiv -f -p -a -b "$MEDIA_DIR/"*

    fi

    sub_page_opt=$(
      printf "next\nprevious\nback\nexit" | rofi -dmenu -mesg "${TITLE} - Go to next page?" -p ">"
    )

    [ -z "$sub_page_opt" ] && break

    case "$sub_page_opt" in
      next)
        subredd_page="after=$(cat "$LAST_NAME_FILE")";;
      previous)
        subredd_page="before=$(cat "$FIRST_NAME_FILE")";;
      exit)
        exit 0;;
      *)
        break;;
    esac

    clean_media

    get_info "$sub_name" "$subredd_page"

  done

  return
}

subreddit() {
  while true; do

    subredd_name=$(rofi -dmenu -mesg "${TITLE} - Enter a subreddit name" -p ">")

    [ -z "$subredd_name" ] && break

    if ! check_request "$subredd_name"; then
      rofi -e "'$subredd_name' don't exist, enter a new subreddit name"
      continue
    fi

    sort_option

    media_type_option

    watch_media "$subredd_name"

    clean_media
  done

  return
}

list_subs() {

  if [ ! -f "$LIST_FILE" ]; then
    notify-send "$TITLE" "Config file doesn't exist"
    return
  fi

  while true; do

    sub_list_opt=$(
      rofi -dmenu -mesg "${TITLE} - List of Subreddits" \
        -p ">" -sep '\n' -select "${sub_list_opt:-}" -input "$LIST_FILE"
    )

    [ -z "$sub_list_opt" ] && break

    sort_option

    media_type_option

    watch_media "$sub_list_opt"

    clean_media
  done

  return
}

search() {
  while true; do

    subreddits_query=1

    sub_query_opt=$(rofi -dmenu -mesg "${TITLE} - Search for a subreddit" -p ">")

    [ -z "$sub_query_opt" ] && break

    get_info "$sub_query_opt"

    while true; do
      sub_query_result=$(
        rofi -dmenu -mesg "${TITLE} - Search results" -p ">" -input "$SUBS_QUERY"
      )

      [ -z "$sub_query_result" ] && break

      subreddits_query=0

      sort_option

      media_type_option

      watch_media "${sub_query_result%% *}"

      clean_media
    done
  done

  return
}

about() {
  about_mesg="LOL"

  rofi -e "$about_mesg"
}

while true; do

  main_menu_opt=$(
    printf "subreddit\nlist\nsearch\nabout" | rofi -dmenu -mesg "Welcome to ${TITLE}" -p ">"
  )

  subreddits_query=0

  case "$main_menu_opt" in
    subreddit)
      subreddit
      ;;
    list)
      list_subs
      ;;
    search)
      search
      ;;
    about)
      about
      ;;
    *) exit 0;;
  esac
done

